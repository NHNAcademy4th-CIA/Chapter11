I/O Streams, Readers, and Writers


흔히 Input / Output   입,출력을 IO라고한다 .

자바에서의 핵심 IO Abstraction 을 IO Stream 이라 부른다.

Stream 이란? 흐름정도라고 생각하면 된다.



Character and Byte Streams

데이터는 표현을 2가지로 해야해

컴퓨터가 알아 먹는 Byte Stream , 사람이 알아먹는 Character Streams


Data를 Byte Stream으로 출력하는 객체는 Abstract Class Output Stream 의 SubType 중 하나입니다.

반대로 Byte 단위로 Data를 읽는 객체는 Abstract Class Input Stream 의 SubType 중 하나입니다.



사람이 읽을 수 있게 문자 데이터를 읽고  쓰기 위한 클래스는 Reader , Writer Abstrac Class 입니다.

모든 Character Stream은 이들 중 하나의 Sub Type입니다.


원래 자바에서는 Character Stream이 없고 ASCII로 인코딩된 문자 데이터의 경우

Byte Stream은 Character Stream과 대치가 가능합니다.

실제로 Standard Input , Output Stream 인 System.in , System.out 은 Character Stream이 아닌
Byte Stream입니다.



Character를 Binary Data로 바꾸는 대에는 여러 방법이 있습니다.

특정 encoding을 Charset , Character Set 이라 합니다.

예를들면 UTF-16 , UTF - 8 등이 존재합니다.


Reading Text

Scanner Class 는 기본적으로 IO Stream의 SUbClass가 아니야 따라서
IO에 딱 들어맞지 않아.

그래서 쓰는게 BufferReader 야

이렇게 쓸 수 있어

BufferedReader bf = new BufferedReader(new FileReader(new File("src/main/resources/" + fileName + ".txt")));


The Scanner Class

Scanner 에 Input Source는  , Reader , InputStream , String , File 일 수 있다.

입력을 처리할 때 Scanner 는 Token을 사용하여 작동함.

Token 이란? -> 더 작은 조각으로 나눌 수 없는 의미있는 문자열

Token은 double 값을 나타내는 단어 혹은 문자열일 수 있다.

sc.nextInt(); 한다고 해서 진짜 정수를 입력받는게 아님

이건 그냥 문자 5인데 , 이걸 읽어들여서 정수형태로 내부적으로 바꿔주는거야




Files


컴퓨터는 Main Memory에 있는 Data만 저장합니다.

나머지는 전원 꺼버리면 그냥 사라짐 . 또 우리는 저장하는 형식을 File이라 해

File은 Directory , Folder로 구성돼



Reading and Writing Files


File읽는데는 FileReader가 사용돼

파일이름을 매개변수로 사용하거나 파일의 위치를 매개변수로 사용해 (절대경로 상대경로 차이)

또 File다 사용했으면 File을 닫는게 좋아  이것도 close() 메서드 호출해서 닫는다.

Sanccer 같은 애들도 마찬가지야

알아둬야 할건 얘의 생성자에 주는 parameter는 파일 자체가 아냐 , 파일의 경로야

그 경로에 따라 파일을 읽는거야




Networking

자바 패키지중 java.net 이 존재함

이 패키지에는 네트워킹에 사용할 수 있는 여러 클래스 존재

java.net.URL , java.net.URLConnection

또 Socket을 다룰수도 있음

Socket = 프로그램이 네트워크의 다른 프로그램과 연결을 설정하는데 사용

또 한 여러가지 작업을 수행할때 Data가 어느곳으로 가야하는지 위치를 정해주기도 해

java.net.Socket 클래스를 사용해



URLs and URLConnections


우리는 항상 고유하게 식별되며 , 웹 브라우저가 네트워크에서 리소스를 찾아

검색할 수 있는 충분한 정보를 포함하는 주소가 필요합니다.

그 주소를 URL이라 합니다.


URL 은 일반적으로 다음과 비슷합니다

https://naver.com


URL에도 relative(상대) URL이 존재하는데

이는 다음과 같습니다.

https://math.hws.edu/eck/index.html


URL 클래스는 이런 주소를 나타내고

이걸 이용해 연결하려면 URLConnection 클래스를 사용하면 됩니다.



URL url = new URL(urlString);
URLConnection connection = url.openConnection();
InputStream urlData = connection.getInputStream();


 String contentType = connection.getContentType();

ContentType 메서드는 문자열을 반환하는데

이 문자열은 MIME Type입니다.

MIME는 text/html , image/jpeg , image/png 등이 포함됩니다.

원래는 E - Mail 에 쓰려고 만들었는데 지금은 파일의 정보유형을 나타내는데 쓰입니다.

이걸통해 읽어오면 해당 페이지 소스가 나옴


 TCP/IP and Client/Server


 인터넷 통신은 TCP/IP 프로토콜을 기반으로 해

 TCP 말고 UDP같은 것도 있는데 이건 논외로 치자고

 TCP/IP 통신을 위해선  Socket을 만들고 연결해야 해

 연결이 이뤄지면 Input Stream , OutputStream 을 사용해 통신이 이루어져


 가장 어려운건 네트워크를 연결하는 거야

 두 개의 Socket이 있는데

 일단 다른 Socket에서 연결요청이 들어올떄까지 기다리는 Socket 이 필요해

 얘는 listening 한다고 말해


또 Listening Socket 에 요청을 보내는 Socket 하나 필요해

Listening Socket이 요청을 수신하고 응답하면 데이터를 전송하기위한

InputStream, OutputStream을 얻을 수 있어

프로그램 연결이 종료될떄까지 이런 Stream을 통해서 통신이 이루어져


Listening Socket을 생성하는 얘가 Server야

사용자 요청을 기다렸다가 , 요청하면 응답하는거지

그렇기 떄문에 Server Socket이라고도 해

이 서버에 요청을 주는게 Client고 연결을 위해 사용하는 Socket을 Client Socket라고 해


이런 걸 Client/Server Model이라고 불러


Client는 통신하려는 컴퓨터를 지정할 수 있는 방법이 필요해

서버도 IP주소가 있어 , 근데 이거 너무 복잡스럽잖아

그래서 Domain Name Server = DNS 사용하지

Ex) Naver.com , Google.com


또 컴퓨터는 여러개의 IP주소를 가질 수 있으며

IPv4 , IPv6 를 모두 가질수 있습니다.

이들중 하나는 동일한 컴퓨터 내에 다른 프로그램과 통신할떄 사용할 수 있는 loopback 주소입니다.

혹은 localhost를 사용할 수도 있어


서버랑 연결할때 단순히 연결되는게 아니라

IP Address , Port Number를 알아야해 , 얘는 16bit로 이루어짐.

이 포트번호로 연결을 수신해




 Sockets in Java

 TCP/IP 연결을 구현하기 위해 java.net 패키지는

 ServerSocket , Socket 클래스 존재해


ServerSocket 는 Listening Socket 야

클라리언트 요청 기다리는 거지

얘 자체는 연결되지 않아 , 단지 연결요청오면 Socket생성해서 처리하는 거야

실제 연결은 다 Socket에서 일어나


public ServerSocket(int port) throws IOException

이런식으로

또 Port Number는 0~65535 사이에 있어 또 일반적으로 1024보다는 커야해


서버쪽


try {
   ServerSocket server = new ServerSocket(1728); // 생성되자마자 수신대기
   while (true) {
      Socket connection = server.accept(); // 클라이언트랑 통신하기 위한 Socket반환 , 연결을 기다리는 동안 block됨 , 다른 작업 수행 불가능
      provideService(connection);
   }
}
catch (IOException e) {
   System.out.println("Server shut down with error: " + e);
}


클라이언트 쪽


public Socket(String computer, int port) throws IOException

DNS, 혹은 IP Address            PortNumber



void doClientConnection(String computerName, int serverPort) {
   Socket connection;
   InputStream in;
   OutputStream out;
   try {
      connection = new Socket(computerName,serverPort); // 서버랑 연결
      in = connection.getInputStream();
      out = connection.getOutputStream();
   }
   catch (IOException e) {
      System.out.println(
          "Attempt to create connection failed with error: " + e);
      return;
   }
    .
    .  // Use the streams, in and out, to communicate with the server.
    .
   try {
      connection.close();
   }
   catch (IOException e) {
   }
}  // end doClientConnection()



데몬 = 사용자가 관계없이 컴퓨터에서 지속적으로 실행되는 프로그램


